package com.chess.engine.player;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import com.chess.engine.Alliance;
import com.chess.engine.board.Board;
import com.chess.engine.board.Move;
import com.chess.engine.board.Tile;
import com.chess.engine.piece.Piece;
import com.google.common.collect.Iterables;

public class WhitePlayer extends Player{
	Collection<Move> legalMovesWhite;
	public WhitePlayer(Board board, Collection<Move> legalMovesWhite, Collection<Move> legalMovesBlack) {
		super(board,legalMovesWhite,legalMovesBlack);
		this.legalMovesWhite=legalMovesWhite;
	}

	@Override
	public Collection<Piece> getActivePieces() {
		return this.board.getWhitePieces();
	}

	@Override
	public Alliance getAlliance() {
		return Alliance.WHITE;
	}

	@Override
	public Player getOpponent() {
		return this.board.getBlackPlayer();
	}

	public Collection<Move> getLegalMoves() {
		return this.legalMovesWhite;
	}

	@Override
	public Collection<Move> calculateKingCastles(Collection<Move> legaMoves, Collection<Move> opponentLegalMoves) {
		//white king side castle
		final List<Move> kingCastles=new ArrayList<>();
		if(this.playerKing.isFirstMove()&&!this.isInCheck()) {
			//white king side castle
			if(!this.board.getTile(61).isTileOccupied()&&!this.board.getTile(62).isTileOccupied()) {
				final Tile rookTile=this.board.getTile(63);
				if(rookTile.isTileOccupied()&&rookTile.getPiece().isFirstMove())[]
			}
		}
	}

}
