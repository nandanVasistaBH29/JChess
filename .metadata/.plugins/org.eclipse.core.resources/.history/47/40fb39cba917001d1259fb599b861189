package com.chess.engine.board;

import com.chess.engine.board.Board.Builder;
import com.chess.engine.piece.Piece;

public abstract class Move {
	final Board board;
	final Piece movedPiece;
	final int destCord;
	public static final NULL_MOVE=new NullMove();

	private Move(final Board board, final Piece movedPiece, final int destCord) {
		this.board = board;
		this.movedPiece = movedPiece;
		this.destCord = destCord;
	}

	// getter
	public Piece getMovedPiece() {
		return movedPiece;
	}
	public int getCurrentCoordinate() {
		return this.getMovedPiece().getPiecePosition();
	}
	// move is of 2 types
	// this the type of move which u would call if the tile is empty
	public static final class MajorMove extends Move {
		public MajorMove(final Board board, final Piece movedPiece, final int destCord) {
			super(board, movedPiece, destCord);
		}
	}

	// end
	public static class AttackMove extends Move {
		final Piece attackedPiece;

		public AttackMove(final Board board, final Piece movedPiece, final int destCord, final Piece attackedPiece) {
			super(board, movedPiece, destCord);
			this.attackedPiece = attackedPiece;
		}
	}
	// end

	// getter
	public int getDestCordinate() {
		return destCord;
	}

	public Board execute() {
		final Builder builder = new Builder();
		// every other piece other than the movedPiece will be remaining same for the
		// current player
		for (final Piece piece : this.board.getCurrentPlayer().getActivePieces()) {
			if (!this.movedPiece.equals(movedPiece)) {
				builder.setPiece(piece);
			}
		}
		for (final Piece piece : this.board.getCurrentPlayer().getOpponent().getActivePieces()) {
			builder.setPiece(piece);// this is a non attack move so not to worry
		}
		// move the movedPiece
		builder.setPiece(this.movedPiece.movePiece(this)); // this refers to the piece which has to be moved
		builder.setNextMoveMaker(this.board.getCurrentPlayer().getOpponent().getAlliance());// next is opponent turn
		return builder.build();
		// when we change something on the board we return a new board
	}

	public static final class PawnMove extends Move {
		final Piece attackedPiece;

		public PawnMove(final Board board, final Piece movedPiece, final int destCord, final Piece attackedPiece) {
			super(board, movedPiece, destCord);
			this.attackedPiece = attackedPiece;
		}
	}

	public static class PawnMoveAttack extends AttackMove {
		public PawnMoveAttack(final Board board, final Piece movedPiece, final int destCord,
				final Piece attackedPiece) {
			super(board, movedPiece, destCord, attackedPiece);
		}
	}

	public static final class PawnEnPassantMoveAttack extends PawnMoveAttack {
		public PawnEnPassantMoveAttack(final Board board, final Piece movedPiece, final int destCord,
				final Piece attackedPiece) {
			super(board, movedPiece, destCord, attackedPiece);
		}
	}

	public static final class PawnJump extends Move {
		public PawnJump(final Board board, final Piece movedPiece, final int destCord, final Piece attackedPiece) {
			super(board, movedPiece, destCord);
		}
	}

	static abstract class CastleMove extends Move {
		public CastleMove(final Board board, final Piece movedPiece, final int destCord) {
			super(board, movedPiece, destCord);
		}
	}

	public static final class KingSideCastleMove extends CastleMove {
		public KingSideCastleMove(final Board board, final Piece movedPiece, final int destCord) {
			super(board, movedPiece, destCord);
		}
	}
l 
	public static final class QueenSideCastleMove extends CastleMove {
		public QueenSideCastleMove(final Board board, final Piece movedPiece, final int destCord) {
			super(board, movedPiece, destCord);
		}
	}
	public static final class NullMove extends Move {
		public NullMove(final Board board, final Piece movedPiece, final int destCord) {
			super(board, movedPiece, destCord);
		}
	}
	public static final class MoveFactory{
		//I added final keyword
		private MoveFactory() {
			throw new RuntimeException("not instantiable");
		}
		public static Move createMove(final Board board,final int currentCoordinate,final int destCoordinate) {
			for(final Move move:board.getAllLegalMoves()) {
				if(move.getCurrentCoordinate()==currentCoordinate&&move.getDestCordinate()==destCoordinate) return move;
			}
//			return new NullMove(board, movedPiece, destCoordinate);
			return NULL_MOVE;
		}
	}
}
