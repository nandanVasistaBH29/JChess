package com.chess.gui;

// JChess/art/holywarriors/BB.gif
import com.chess.engine.board.Board;
import com.chess.engine.board.BoardUtils;
import com.chess.engine.board.BoardUtils.*;
import java.awt.BorderLayout;
import java.awt.Color;
//awt
import java.awt.Dimension;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
//util
import java.util.Arrays;
import java.util.List;

import javax.imageio.ImageIO;
import javax.imageio.ImageReadParam;
import javax.imageio.stream.IIOByteBuffer;
import javax.imageio.stream.ImageInputStream;
import javax.swing.ImageIcon;
//swing
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;

public class Table {
	private final JFrame gameFrame;// c
	private final BoardPanel boardPanel;
	private static String defaultPieceImagesPath = "/java/Chess/JChess/art/holywarriors/";
	private Board chessBoard;
	private Color lightTileColor = Color.decode("#FFFACD");
	private Color darkTileColor = Color.decode("#593E1A");
	private final static Dimension OUTER_FRAME_DIMENTION = new Dimension(600, 600);// c
	private static final Dimension BOARD_PANEL_DIMENTION = new Dimension(400, 350);
	private static final Dimension TILE_PANEL_DIMENTION = new Dimension(10, 10);

	public Table() {
		// TODO later has to be converted into a singleTon class
		this.gameFrame = new JFrame("JChess");// c
		this.gameFrame.setLayout(new BorderLayout());// c
		final JMenuBar tableMenuBar = createTableMenuBar();// c
		this.gameFrame.setJMenuBar(tableMenuBar);// c
		this.gameFrame.setSize(OUTER_FRAME_DIMENTION);// c
		this.chessBoard = Board.createStandardBoard();
		this.boardPanel = new BoardPanel();// x
		this.gameFrame.add(this.boardPanel, BorderLayout.CENTER);// this helps in creating grids
		this.gameFrame.setVisible(true);// c
	}

	private JMenuBar createTableMenuBar() {
		final JMenuBar tableMenuBar = new JMenuBar();
		tableMenuBar.add(createFileMenu());
		return tableMenuBar;
	}

	private JMenu createFileMenu() {
		final JMenu fileMenu = new JMenu("File"); // <-- this is show File on top
		final JMenuItem openPGN = new JMenuItem("Load PGN FILE");// <--this is shown when you click on it(File)
		openPGN.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				System.out.println("open up that pgn file");
			}
		});
		fileMenu.add(openPGN);
		// similar to openPNG we will have an option to exit
		final JMenuItem exitFromApp = new JMenuItem("Exit");
		exitFromApp.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				System.exit(0);
			}
		});
		fileMenu.add(exitFromApp);
		return fileMenu;
	}

	private class BoardPanel extends JPanel {

		final List<TilePanel> boardTiles;

		BoardPanel() {
			super(new GridLayout(8, 8));// chess is 8*8 grid na
			this.boardTiles = new ArrayList<TilePanel>();
			// 64tiles
			for (int i = 0; i < 64; i++) {
				final TilePanel tilePanel = new TilePanel(this, i);
				// i is id(0-63) this is BoardPanel
				this.boardTiles.add(tilePanel);
				add(tilePanel);// TODO:understand ? ans add(tilePanel) is same as this.add(tilePanel) this
								// refers to JPanel object
			}
			setPreferredSize(BOARD_PANEL_DIMENTION);
			validate();// inbuilt
		}
	}

	private class TilePanel extends JPanel {

		private final int tileId;

		TilePanel(final BoardPanel boardPanel, final int tileId) {
			super(new GridBagLayout());// decor
			this.tileId = tileId;
			setPreferredSize(TILE_PANEL_DIMENTION);
			assignTileColor();
			assignTilePieceIcon(chessBoard);
			validate();
		}

		private void assignTilePieceIcon(final Board board) {
			// remove all the components
			this.removeAll();
			if (board.getTile(this.tileId).isTileOccupied()) {
				// draw that piece
				try {
					final BufferedImage image = ImageIO.read(
							new File(defaultPieceImagesPath
									+ board.getTile(this.tileId).getPiece().getPieceAlliance().toString().substring(0,
											1)
									+ board.getTile(this.tileId).getPiece().toString() + ".gif"));
					add(new JLabel(new ImageIcon(image)));
				} catch (IOException e) {
					e.printStackTrace();
					System.exit(1);
				}
			}
		}

		private void assignTileColor() {
			if (BoardUtils.FIRST_ROW[tileId] || BoardUtils.THIRD_ROW[tileId] || BoardUtils.FIFTH_ROW[tileId]
					|| BoardUtils.SEVENTH_ROW[tileId]) {
				setBackground(tileId % 2 == 0 ? lightTileColor : darkTileColor);
			} else if (BoardUtils.SECOND_ROW[tileId] || BoardUtils.FORTH_ROW[tileId] || BoardUtils.SIXTH_ROW[tileId]
					|| BoardUtils.EIGTH_ROW[tileId]) {
				setBackground(this.tileId % 2 != 0 ? lightTileColor : darkTileColor);
			}
		}
	}
}
